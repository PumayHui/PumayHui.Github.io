---
layout:     post
title:      "Thrift学习"
date:       2018-01-03 08:53:18
author:     "Pumay"
header-img: "img/star.png"
catalog: true
tags:
    - Programming Language
    
---


# 一. 什么是Thrift？

Thrift由Facebook研发，主要用于各个服务之间的RPC（Remote Procedure Call，远程过程调用）通信。支持跨语言，常用的语言比如C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, JavaScript, Node.js, Smalltalk, and OCaml都支持。


Thrift是一个典型的CS（客户端/服务端）结构，客户端和服务端可以使用不同的语言开发。既然客户端和服务端能使用不同的语言开发，那么一定就要有一种中间语言来关联客户端和服务端的语言，这种语言就是IDL（Interface Description Language）。

# 二. 应用场景

Thrift主要用于分布式系统中，用于各个服务/模块之间的通信，就是常说的RPC，并且由于跨语言，对服务端和客户端的语言没有硬性要求。

一个比较简单的场景：

某公司有两个部门，一个部门A用C语言开发，另一个部门B用Java语言开发，现在A需要B部门的一些数据，则B部门可以提供一个thrift接口，A部门通过这个thrift接口获取需要的数据，不仅跨服务，而且跨语言。

# 三. 主要特点

## 1.开发速度快

通过编写RPC接口IDL文件，利用编译生成器自动生成Server端骨架(Skeletons)和客户端Stubs，省去开发者自定义和维护接口编解码、消息传输、服务器多线程模型等基础工作；Server端开发者只需按照服务骨架，写好自己的业务处理程序(Handlers)即可，Client端程序只需创建IDL中定义的服务对象，然后就像调用本地对象的方法一样调用远端服务。

## 2.接口维护简单高效

通过维护Thrift格式的IDL文件（注意写好注释），即可作为给Clients使用的接口文档使用，也自动生成接口代码，始终保持代码和文档的一致性。且Thrift协议可灵活支持接口的可扩展性。

## 3.学习成本低

因为其来自Google Protocol Buffers开发团队，所以其IDL文件风格类似Google Protocol Buffers，且更加易读易懂；特别是RPC服务接口的风格就像写一个一般的面向对象的Class一样简单。

初学者只需参照http://thrift.apache.org/ 几个小时即可理解和使用Thrift。
多语言/跨语言支持：

Thrift支持C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, JavaScript, Node.js, Smalltalk, OCaml and Delphi等多种语言，即可生成上述语言的服务器端和客户端程序。

对于我们经常使用的Java、PHP、Python、C++支持良好，虽然对iOS环境的Objective-C(Cocoa)支持稍逊，但也完全满足我们的使用要求。

## 4.已验证成熟稳定

Thrift在很多开源项目中已经被验证是稳定和高效的，例如Cassandra、Evernode等；在Facebook、Baidu等后台产品中也有使用。


# 四.开发步骤

安装好thrift后，就可以开始开发了。开发过程如下：

- 第1步： 写.thrift文件，也就是接口描述文件（Interface Description File）；

- 第2步： 用Thrift compiler for Windows (thrift-0.9.1.exe) ，生成目标语言代码；

- 第3步： 服务器端程序引入thrift生成的代码，实现RPC业务代码。

- 第4步： 客户端引入代码，调用远程服务。


![](http://img.blog.csdn.net/20140815234756473?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvY29sb3Vyb28=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)


# 五. thrift定义Services

服务的定义方法在语义上等同于面向对象语言中的接口。
 ```
service HelloService {
    i32 sayInt(1:i32 param)
    string sayString(1:string param)
    bool sayBoolean(1:bool param)
    void sayVoid()
}
 ```
 
编译后的Java代码:

 ```
public class HelloService {
  public interface Iface {
    public int sayInt(int param) throws org.apache.thrift.TException;
    public java.lang.String sayString(java.lang.String param) throws org.apache.thrift.TException;
    public boolean sayBoolean(boolean param) throws org.apache.thrift.TException;
    public void sayVoid() throws org.apache.thrift.TException;
  }
  // ... 省略很多代码
}
 ```

# 六. 协议栈

![](/img/thrift.png)

Thrift 是采用RPC（远程调用）的概念实现跨语言的，Transport层负责使用指定协议（TCP / HTTP / FILE / PIPE … )交换数据， Protocol层负责用指定的协议（ JSON,Binary，XML … ) 编解码数据，Processor层是我们自己code的层， 负责接口的具体实现（server端）/ 对接口的调用使用（client端） 。

# 七.双向通信

默认情况下，thrift是单向通信的，但是通过一定的技巧是可以实现双向通信的，目前网上能找到的是关于Java和C++的例子，但是go的基本没有关于thrift双向通信的讨论。不知有哪位有这方面的例子或思路？以下几个参考基本是对getProcessor函数进行了改写，参考： 

http://blog.csdn.net/qq_27989757/article/details/50725973 

http://blog.csdn.net/qq_27989757/article/details/50761051 

http://joelpm.com/2009/04/03/thrift-bidirectional-async-rpc.html 

http://www.cnphp6.com/archives/63935
